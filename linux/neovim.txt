# fedora 30 使用git安装。pip安装可能有点问题

pip install neovim

mkdir -p ~/.config/nvim
cat <<EOF > ~/.config/nvim/init.vim
if has('win32') || has('win64')
    let g:plugged_home = '~/AppData/Local/nvim/plugged'
else
    let g:plugged_home = '~/.vim/plugged'
endif
" Plugins List
call plug#begin(g:plugged_home)
" UI related
Plug 'chriskempson/base16-vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Better Visual Guide
Plug 'Yggdroot/indentLine'
" syntax check
Plug 'w0rp/ale'
" Autocomplete
Plug 'ncm2/ncm2'
Plug 'roxma/nvim-yarp'
Plug 'ncm2/ncm2-bufword'
Plug 'ncm2/ncm2-path'
Plug 'ncm2/ncm2-jedi'
" Formater
Plug 'Chiel92/vim-autoformat'
call plug#end()
filetype plugin indent on
EOF

curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

nvim

You can execute following command in Nvim comand mode:

Install plugins：:PlugInstall
Update plugins：:PlugUpdate
Remove plugins：:PlugClean (First, comment the plugin install command in init.vim. Open Nvim and use :PlugClean to uninstall plugins)
Check the plugin status：:PlugStatus
Upgrade vim-plug itself：:PlugUpgrade
-----------------------------
cat <<EOF >> ~/.config/nvim/init.vim
" Configurations Part
" UI configuration
syntax on
syntax enable
" colorscheme
let base16colorspace=256
colorscheme base16-gruvbox-dark-hard
set background=dark
" True Color Support if it's avaiable in terminal
if has("termguicolors")
    set termguicolors
endif
if has("gui_running")
  set guicursor=n-v-c-sm:block,i-ci-ve:block,r-cr-o:blocks
endif
set number
set relativenumber
set hidden
set mouse=a
set noshowmode
set noshowmatch
set nolazyredraw
" Turn off backup
set nobackup
set noswapfile
set nowritebackup
" Search configuration
set ignorecase                    " ignore case when searching
set smartcase                     " turn on smartcase
" Tab and Indent configuration
set expandtab
set tabstop=4
set shiftwidth=4
" vim-autoformat
noremap <F3> :Autoformat<CR>
" NCM2
augroup NCM2
  autocmd!
  " enable ncm2 for all buffers
  autocmd BufEnter * call ncm2#enable_for_buffer()
  " :help Ncm2PopupOpen for more information
  set completeopt=noinsert,menuone,noselect
  " When the <Enter> key is pressed while the popup menu is visible, it only
  " hides the menu. Use this mapping to close the menu and also start a new line.
  inoremap <expr> <CR> (pumvisible() ? "\<c-y>\<cr>" : "\<CR>")
  " uncomment this block if you use vimtex for LaTex
  " autocmd Filetype tex call ncm2#register_source({
  "           \ 'name': 'vimtex',
  "           \ 'priority': 8,
  "           \ 'scope': ['tex'],
  "           \ 'mark': 'tex',
  "           \ 'word_pattern': '\w+',
  "           \ 'complete_pattern': g:vimtex#re#ncm2,
  "           \ 'on_complete': ['ncm2#on_complete#omni', 'vimtex#complete#omnifunc'],
  "           \ })
augroup END
" Ale
let g:ale_lint_on_enter = 0
let g:ale_lint_on_text_changed = 'never'
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_linters = {'python': ['flake8']}
" Airline
let g:airline_left_sep  = ''
let g:airline_right_sep = ''
let g:airline#extensions#ale#enabled = 1
let airline#extensions#ale#error_symbol = 'E:'
let airline#extensions#ale#warning_symbol = 'W:'
EOF
-------------------------------
In order to have code completion, syntax checking, and code formatting, we need the following python packages

jedi for code completion: pip install jedi
flake8 for code linting: pip install flake8
autopep8 for code formatting: pip install autopep8

pip install jedi
pip install flake8
pip install autopep8
-----------------------------
mkdir -p ~/.config/nvim
git clone https://github.com/jdhao/nvim-config.git .
nvim
-----------------------------
# Building Neovim
dnf install -y autoconf automake cmake g++ libtool
git clone https://github.com/neovim/neovim.git
cd neovim
git checkout stable
make -j4
--------------------------------------------------
Basic idea
There are many shortcuts key in SpaceVim, the most frequently used shortcut keys are often starting with Space key, I guess that's why we call it SpaceVim. For convenience, when we mention spc, it means the Space key on keyboard.

1. Shortcuts
There are different kinds of shortcuts, start with different prefix:

<table>
<thead>
<tr>
<th>Prefix</th>
<th>Prefix name</th>
<th>Example</th>
<th>Description</th>
<th>More info</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>space</code></td>
<td><code>[SPC]</code></td>
<td><code>spc f t</code></td>
<td>open/close filetree</td>
<td>just press space key and wait 1s</td>
</tr>
<tr>
<td><code>s</code></td>
<td><code>[WIN]</code></td>
<td><code>s v</code></td>
<td>split window, equal to <code>:split</code></td>
<td><a href="https://spacevim.org/documentation/#window-manager" rel="nofollow">link</a></td>
</tr>
<tr>
<td><code>\</code></td>
<td><code>&lt;Leader&gt;</code></td>
<td><code>\ [0-9]</code></td>
<td>jump to other tab or buffer</td>
<td>just press <code>\</code> key and wait 1s</td>
</tr>
<tr>
<td><code>g</code></td>
<td>go to</td>
<td><code>g 0</code></td>
<td>go to first tab</td>
<td><a href="https://spacevim.org/documentation/#commands-starting-with-g" rel="nofollow">link</a></td>
</tr>
<tr>
<td><code>z</code></td>
<td>fold</td>
<td><code>z a</code></td>
<td>toggle a fold</td>
<td><a href="https://spacevim.org/documentation/#commands-starting-with-z" rel="nofollow">link</a></td>
</tr>
</tbody>
</table>

Just press the button spc, wait 1 second, you will see useful hint to shortcuts, explore by yourself.
