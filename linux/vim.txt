查看Vim实例中当前的颜色主题

打开一个Vim窗口，输入命令:color或:colorscheme后回车查看当前的颜色主题。

得到Vim示例当前的颜色主题

可以看到当前的颜色主题为default。

Vim实例中设置颜色主题

输入命令"colorscheme 主题名字"，即可设置当前vim实例的颜色主题。

查看Vim的运行目录

vim的颜色主题文件放在Vim运行目录下的color目录下，所以我们首先需要知道vim的运行目录。

在vim中输入命令:echo $VIMRUNTIME 来查看Vim的运行目录。

得到vim的运行目录

从图中可以看到，vim的运行路径为/usr/share/vim/vim74

进入vim的运行目录，查看color目录下以“.vim”为结尾的文件

这些文件即是颜色主题文件，文件名就是主题名字。

修改vim配置文件，更改默认颜色主题

打开/etc/vim/vimrc文件，在其中加入一行"colorscheme 颜色主题名字"，之后保存更改即可。
colorscheme torte

How do I list loaded plugins in Vim?
" where was an option set  
:scriptnames            : list all plugins, _vimrcs loaded (super)  
:verbose set history?   : reveals value of history and where set  
:function               : list functions  
:func SearchCompl       : List particular function"

-----------------------------------------------------
# https://www.bilibili.com/video/av67091857/?spm_id_from=333.788.videocard.1
curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
cd ~/.config/nvim && wget https://github.com/theniceboy/nvim/raw/master/init.vim
wget https://github.com/theniceboy/nvim/raw/master/md-snippets.vim
wget -O _machine_specific.vim https://github.com/theniceboy/nvim/raw/master/default_configs/_machine_specific_default.vim
 (word: 标点或空格分隔的单词)

# 复制到剪贴板
set clipboard=unnamedplus
"+y
# 从剪贴板粘贴
"+p
--------------------------------------------------
vim /etc/vim/vimrc

加入
set fileencodings=utf-8,gbk,utf-16le,cp1252,iso-8859-15,ucs-bom
set termencoding=utf-8
set encoding=utf-8
--------------------------------------------------
How can I find out what <Leader> is set to? And is it possible to remap <Leader>?

By default your <leader> is \, backslash. You can check it with:

:echo mapleader

If this gives you an E121: Undefined variable: mapleader, it means it's set to the default of \. If it gives you something else, then it's that :-)

You can easily remap it. I mapped it to the space-bar:

:let mapleader = "\<Space>"

Note that the value of mapleader is used at the moment the mapping is defined. So this example:

let mapleader = ","
nnoremap <Leader>a :echo "Hey there ,"<CR>

let mapleader = "\<Space>"
nnoremap <Leader>a :echo "Hey there space"<CR>

Will produce two mappings: ,a and <Space>a.

This means that the current value of mapleader is not necessarily the value that was used to define your mappings!

In addition, there's the maplocalleader, which is the same as mapleader, except that it's used by <LocalLeader> and that it's local to the current buffer.

--------------------------------------------------
Vim 中的 remap，noremap，nnoremap 和 vnoremap 映射命令有什么区别？

remap是一个使映射以递归方式工作的选项 。默认情况下它已打开，我建议你保持这种状态。其余的是映射命令 ，如下所述：

:map和:noremap是各种映射命令的递归和非递归版本。这意味着，如果你这样做：

:map j gg
:map Q j
:noremap W j

j将映射到gg 。 Q 也将映射到gg ，因为j将被扩展用于递归映射。 W将被映射到j （而不是gg ），因为j不会针对非递归映射进行扩展。

现在请记住，Vim 是一个模态编辑器 。它具有普通模式， 可视模式和其他模式。

对于这些映射集中的每一个，都有一个映射可以在正常，可视，选择和操作员模式下工作（ :map和:noremap ），一个在普通模式下工作（ :nmap和:nnoremap ），一个在可视模式下（ :vmap和:vnoremap ）等等。

有关此问题的更多指导，请参阅：

:help :map
:help :noremap
:help recursive_mapping
:help :map-modes

--------------------------------------------------
Search and replace
:%s/foo/bar/g
    Find each occurrence of 'foo' (in all lines), and replace it with 'bar'. 

:s/foo/bar/g
    Find each occurrence of 'foo' (in the current line only), and replace it with 'bar'. 

:%s/foo/bar/gc
    Change each 'foo' to 'bar', but ask for confirmation first. 

:%s/\<foo\>/bar/gc
    Change only whole words exactly matching 'foo' to 'bar'; ask for confirmation. 

:%s/foo/bar/gci
    Change each 'foo' (case insensitive due to the i flag) to 'bar'; ask for confirmation. 
    :%s/foo\c/bar/gc is the same because \c makes the search case insensitive. 
    This may be wanted after using :set noignorecase to make searches case sensitive (the default). 

:%s/foo/bar/gcI
    Change each 'foo' (case sensitive due to the I flag) to 'bar'; ask for confirmation. 
    :%s/foo\C/bar/gc is the same because \C makes the search case sensitive. 
    This may be wanted after using :set ignorecase to make searches case insensitive.

rm ~/.vim/nvim
rm -rf ~/.config/nvim

#
rm -rf .SpaceVim
rm -rf .cache/SpaceVim
rm -rf  .cache/vimfiler/
rm -rf  .cache/vimfiles/
--------------------------------------------------
vim编辑器中整段代码的移动
先在~/.vimrc文件中设置一下参数，set shiftwidth=4。

之后进入vim中，按下v，进行选择移动的整段代码，是连续的代码段。之后进行可以  向左（向右）移动。

shift+> (向右缩进) ，shift+<(向左缩进)。
--------------------------------------------------
单词加上引号
Quote a word, using single quotes
ciw'Ctrl+r"'
ciw - Delete the word the cursor is on, and end up in insert mode.
' - add the first quote.
Ctrl+r" - Insert the contents of the " register, aka the last yank/delete.
' - add the closing quote.

