What is the difference between __init__ and __call__ in Python?

class A:
      def __init__(self):
          print("init")
          
      def __call__(self):
          print("call")
a=A()
a()
A()()
-----------------------------------------------------------------
python中有一个zfill方法用来给字符串前面补0，非常有用
n = "123"
s = n.zfill(5)
assert s == "00123"
zfill()也可以给负数补0
n = "-123"
s = n.zfill(5)
assert s == "-0123"
对于纯数字，我们也可以通过格式化的方式来补0
n = 123
s = "%05d" % n
assert s == "00123"


update all installed python packages with pip
pip install -U $(pip freeze | awk '{split($0, a, "=="); print a[1]}')
或者：
pip install -U $(pip freeze | cut -d '=' -f 1)

强制安装
pip install --upgrade --no-deps --force-reinstall your-package

pip list --outdated
--------------------------------------------------
Jupyter(.ipynb) to Python(.py)
> ipython nbconvert --to script abc.ipynb

You can have abc.py

Jupyter nbconvert --to python abc.ipynb
--------------------------------------------------
# Python3 code to demonstrate working of
# Index of Non-Zero elements in Python list
# using list comprehension + enumerate()

# initialize list
test_list = [6, 7, 0, 1, 0, 2, 0, 12]

# printing original list
print("The original list is : " + str(test_list))

# Index of Non-Zero elements in Python list
# using list comprehension + enumerate()
res = [idx for idx, val in enumerate(test_list) if val != 0]

# printing result
print("Indices of Non-Zero elements : " + str(res))

Output :
The original list is : [6, 7, 0, 1, 0, 2, 0, 12]
Indices of Non-Zero elements : [0, 1, 3, 5, 7]